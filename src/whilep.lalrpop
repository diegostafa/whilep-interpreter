grammar;

use std::str::FromStr;
use crate::ast::*;

Whitespace: () = r"\s+";
Identifier: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();
Number: i32 = r"[0-9]+" => FromStr::from_str(<>).unwrap();

pub SExpr: StatementExpr =
{
    TerminalSExpr,
    <s1:SExpr> ";" <s2:TerminalSExpr> => StatementExpr::Chain(Box::new(s1), Box::new(s2)),
};

TerminalSExpr: StatementExpr =
{
    "skip" => StatementExpr::Skip,
    <x:Identifier> ":=" <e:AExpr> => StatementExpr::Assignment{var: x, val: Box::new(e)},
    "if" <b:BExpr> "then" <s1:SExpr> "else" <s2:SExpr> "end"  => StatementExpr::Conditional{cond:Box::new(b), tt_branch: Box::new(s1), ff_branch: Box::new(s2)},
    "while" <b:BExpr> "do" <s:SExpr> "done" => StatementExpr::WhileLoop{cond: Box::new(b), body: Box::new(s)},

    // syntax sugar
    "repeat" <s:SExpr> "until" <b:BExpr>
        => StatementExpr::Chain(
            Box::new(s.clone()),
            Box::new(StatementExpr::WhileLoop{
                cond: Box::new(BooleanExpr::Not(Box::new(b))),
                body: Box::new(s.clone())})),

    // syntax sugar
    "for" <x:Identifier> "in"  "[" <from:AExpr> ".."  <to:AExpr> "]" "do" <s:SExpr> "done"
        => StatementExpr::Chain(
            Box::new(StatementExpr::Assignment{var: x.clone(), val: Box::new(from)}),
            Box::new(StatementExpr::WhileLoop{
                cond: Box::new(BooleanExpr::NumLtEq(Box::new(ArithmeticExpr::Identifier(x.clone())), Box::new(to))),
                body: Box::new(StatementExpr::Chain(
                    Box::new(s),
                    Box::new(StatementExpr::Assignment{
                        var: x.clone(),
                        val: Box::new(ArithmeticExpr::Add(Box::new(ArithmeticExpr::Identifier(x.clone())), Box::new(ArithmeticExpr::Number(1)))
                            )})))})),
};

AExpr: ArithmeticExpr =
{
    #[precedence(level="1")]
    <x:Identifier>  => ArithmeticExpr::Identifier(x),
    <n:Number>      => ArithmeticExpr::Number(n),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:AExpr> "*" <r:AExpr> => ArithmeticExpr::Mul(Box::new(l), Box::new(r)),
    <l:AExpr> "/" <r:AExpr> => ArithmeticExpr::Div(Box::new(l), Box::new(r)),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:AExpr> "+" <r:AExpr> => ArithmeticExpr::Add(Box::new(l), Box::new(r)),
    <l:AExpr> "-" <r:AExpr> => ArithmeticExpr::Sub(Box::new(l), Box::new(r)),
};

BExpr: BooleanExpr =
{
    #[precedence(level="1")]
    "true"                      => BooleanExpr::True,
    "false"                     => BooleanExpr::False,

    #[precedence(level="2")]
    "!" <e:BExpr>               => BooleanExpr::Not(Box::new(e)),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:BExpr> "&&" <r:BExpr>    => BooleanExpr::And(Box::new(l),Box::new(r)),
    <l:AExpr> "==" <r:AExpr>    => BooleanExpr::NumEq(Box::new(l), Box::new(r)),
    <l:AExpr> "<=" <r:AExpr>    => BooleanExpr::NumLtEq(Box::new(l), Box::new(r)),

    // --- syntax sugar
    <l:BExpr> "||" <r:BExpr>    => BooleanExpr::Not(Box::new(BooleanExpr::And(Box::new(BooleanExpr::Not(Box::new(l))), Box::new(BooleanExpr::Not(Box::new(r)))))),
    <l:AExpr> "<" <r:AExpr>     => BooleanExpr::And(Box::new(BooleanExpr::NumLtEq(Box::new(l.clone()), Box::new(r.clone()))), Box::new(BooleanExpr::Not(Box::new(BooleanExpr::NumEq(Box::new(l.clone()), Box::new(r.clone())))))),
    <l:AExpr> ">" <r:AExpr>     => BooleanExpr::Not(Box::new(BooleanExpr::NumLtEq(Box::new(l), Box::new(r)))),
    <l:AExpr> "!=" <r:AExpr>    => BooleanExpr::Not(Box::new(BooleanExpr::NumEq(Box::new(l), Box::new(r)))),
};